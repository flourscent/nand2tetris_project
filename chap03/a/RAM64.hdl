// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16-bit wide.  
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = RAM64[address(t)](t)
 *     Write: If load(t-1) then RAM64[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address.  This value becomes 
 * available through the out output starting from the next time step.
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
		DMux8Way(in=load, sel=address[0..2], a=ram00load, b=ram01load, c=ram02load, d=ram03load, e=ram04load, f=ram05load, g=ram06load, h=ram07load);
		RAM8(in=in, load=ram00load, address=address[3..5], out=ram00out);
		RAM8(in=in, load=ram01load, address=address[3..5], out=ram01out);
		RAM8(in=in, load=ram02load, address=address[3..5], out=ram02out);
		RAM8(in=in, load=ram03load, address=address[3..5], out=ram03out);
		RAM8(in=in, load=ram04load, address=address[3..5], out=ram04out);
		RAM8(in=in, load=ram05load, address=address[3..5], out=ram05out);
		RAM8(in=in, load=ram06load, address=address[3..5], out=ram06out);
		RAM8(in=in, load=ram07load, address=address[3..5], out=ram07out);
		Mux8Way16(a=ram00out, b=ram01out, c=ram02out, d=ram03out, e=ram04out, f=ram05out, g=ram06out, h=ram07out, sel=address[0..2], out=out);
}
